{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\nexport const doctorAPI = {\n  getAll: () => api.get('/doctors'),\n  search: params => api.get('/doctors/search', {\n    params\n  }),\n  getProfile: () => api.get('/doctors/profile'),\n  updateProfile: data => api.put('/doctors/profile', data),\n  updateAvailability: availability => api.put('/doctors/availability', availability)\n};\nexport const appointmentAPI = {\n  book: appointmentData => api.post('/appointments/patient/book', appointmentData),\n  getPatientAppointments: () => api.get('/appointments/patient/my-appointments'),\n  getDoctorAppointments: () => api.get('/appointments/doctor/my-appointments'),\n  approve: id => api.put(`/appointments/doctor/${id}/approve`),\n  reject: id => api.put(`/appointments/doctor/${id}/reject`),\n  cancel: id => api.put(`/appointments/${id}/cancel`),\n  getAll: () => api.get('/appointments/admin/all')\n};\nexport const patientAPI = {\n  getProfile: () => api.get('/patient/profile'),\n  updateProfile: data => api.put('/patient/profile', data)\n};\nexport const adminAPI = {\n  createDoctor: doctorData => api.post('/admin/doctors', doctorData),\n  getAllDoctors: () => api.get('/admin/doctors'),\n  updateDoctor: (id, data) => api.put(`/admin/doctors/${id}`, data),\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getAllAppointments: () => api.get('/admin/appointments')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","login","credentials","post","register","userData","doctorAPI","getAll","get","search","params","getProfile","updateProfile","data","put","updateAvailability","availability","appointmentAPI","book","appointmentData","getPatientAppointments","getDoctorAppointments","approve","id","cancel","patientAPI","adminAPI","createDoctor","doctorData","getAllDoctors","updateDoctor","getDashboardStats","getAllAppointments"],"sources":["E:/3RD YEAR/HealthcareAppointmentManagementSystem/reactapp/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n};\n\nexport const doctorAPI = {\n  getAll: () => api.get('/doctors'),\n  search: (params) => api.get('/doctors/search', { params }),\n  getProfile: () => api.get('/doctors/profile'),\n  updateProfile: (data) => api.put('/doctors/profile', data),\n  updateAvailability: (availability) => api.put('/doctors/availability', availability),\n};\n\nexport const appointmentAPI = {\n  book: (appointmentData) => api.post('/appointments/patient/book', appointmentData),\n  getPatientAppointments: () => api.get('/appointments/patient/my-appointments'),\n  getDoctorAppointments: () => api.get('/appointments/doctor/my-appointments'),\n  approve: (id) => api.put(`/appointments/doctor/${id}/approve`),\n  reject: (id) => api.put(`/appointments/doctor/${id}/reject`),\n  cancel: (id) => api.put(`/appointments/${id}/cancel`),\n  getAll: () => api.get('/appointments/admin/all'),\n};\n\nexport const patientAPI = {\n  getProfile: () => api.get('/patient/profile'),\n  updateProfile: (data) => api.put('/patient/profile', data),\n};\n\nexport const adminAPI = {\n  createDoctor: (doctorData) => api.post('/admin/doctors', doctorData),\n  getAllDoctors: () => api.get('/admin/doctors'),\n  updateDoctor: (id, data) => api.put(`/admin/doctors/${id}`, data),\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getAllAppointments: () => api.get('/admin/appointments'),\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMS,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAK3B,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEE,QAAQ;AAC7D,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG;EACvBC,MAAM,EAAEA,CAAA,KAAM7B,GAAG,CAAC8B,GAAG,CAAC,UAAU,CAAC;EACjCC,MAAM,EAAGC,MAAM,IAAKhC,GAAG,CAAC8B,GAAG,CAAC,iBAAiB,EAAE;IAAEE;EAAO,CAAC,CAAC;EAC1DC,UAAU,EAAEA,CAAA,KAAMjC,GAAG,CAAC8B,GAAG,CAAC,kBAAkB,CAAC;EAC7CI,aAAa,EAAGC,IAAI,IAAKnC,GAAG,CAACoC,GAAG,CAAC,kBAAkB,EAAED,IAAI,CAAC;EAC1DE,kBAAkB,EAAGC,YAAY,IAAKtC,GAAG,CAACoC,GAAG,CAAC,uBAAuB,EAAEE,YAAY;AACrF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG;EAC5BC,IAAI,EAAGC,eAAe,IAAKzC,GAAG,CAACyB,IAAI,CAAC,4BAA4B,EAAEgB,eAAe,CAAC;EAClFC,sBAAsB,EAAEA,CAAA,KAAM1C,GAAG,CAAC8B,GAAG,CAAC,uCAAuC,CAAC;EAC9Ea,qBAAqB,EAAEA,CAAA,KAAM3C,GAAG,CAAC8B,GAAG,CAAC,sCAAsC,CAAC;EAC5Ec,OAAO,EAAGC,EAAE,IAAK7C,GAAG,CAACoC,GAAG,CAAC,wBAAwBS,EAAE,UAAU,CAAC;EAC9DxB,MAAM,EAAGwB,EAAE,IAAK7C,GAAG,CAACoC,GAAG,CAAC,wBAAwBS,EAAE,SAAS,CAAC;EAC5DC,MAAM,EAAGD,EAAE,IAAK7C,GAAG,CAACoC,GAAG,CAAC,iBAAiBS,EAAE,SAAS,CAAC;EACrDhB,MAAM,EAAEA,CAAA,KAAM7B,GAAG,CAAC8B,GAAG,CAAC,yBAAyB;AACjD,CAAC;AAED,OAAO,MAAMiB,UAAU,GAAG;EACxBd,UAAU,EAAEA,CAAA,KAAMjC,GAAG,CAAC8B,GAAG,CAAC,kBAAkB,CAAC;EAC7CI,aAAa,EAAGC,IAAI,IAAKnC,GAAG,CAACoC,GAAG,CAAC,kBAAkB,EAAED,IAAI;AAC3D,CAAC;AAED,OAAO,MAAMa,QAAQ,GAAG;EACtBC,YAAY,EAAGC,UAAU,IAAKlD,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEyB,UAAU,CAAC;EACpEC,aAAa,EAAEA,CAAA,KAAMnD,GAAG,CAAC8B,GAAG,CAAC,gBAAgB,CAAC;EAC9CsB,YAAY,EAAEA,CAACP,EAAE,EAAEV,IAAI,KAAKnC,GAAG,CAACoC,GAAG,CAAC,kBAAkBS,EAAE,EAAE,EAAEV,IAAI,CAAC;EACjEkB,iBAAiB,EAAEA,CAAA,KAAMrD,GAAG,CAAC8B,GAAG,CAAC,wBAAwB,CAAC;EAC1DwB,kBAAkB,EAAEA,CAAA,KAAMtD,GAAG,CAAC8B,GAAG,CAAC,qBAAqB;AACzD,CAAC;AAED,eAAe9B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}