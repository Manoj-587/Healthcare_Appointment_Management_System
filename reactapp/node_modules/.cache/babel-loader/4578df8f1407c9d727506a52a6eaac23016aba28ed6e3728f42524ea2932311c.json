{"ast":null,"code":"const auth = \"http://localhost:8080/api/auth\";\n\n// Register patient\nexport async function registerPatient(data) {\n  const response = await fetch(`${auth}/register/patient`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n}\n\n// Login patient\nexport async function loginPatient(credentials) {\n  const res = await fetch(`${auth}/login/patient`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!res.ok) {\n    const errorText = await res.text(); // reads backend ResponseEntity body\n    throw new Error(errorText || \"Login failed\");\n  }\n  return res.json();\n}\n\n// getPatient\n\nconst patientUrl = \"http://localhost:8080/api/patients\";\nexport async function fetchPatientAppointments(patientId) {\n  const res = await fetch(`${patientUrl}/${patientId}`);\n  if (!res.ok) {\n    const errorText = await res.text();\n    throw new Error(errorText || \"Failed to fetch appointments\");\n  }\n  return res.json();\n}\nexport async function fetchDoctors() {\n  const res = await fetch(\"http://localhost:8080/api/doctors\");\n  return res.json();\n}\nexport async function createAppointment(appointment) {\n  const res = await fetch(\"http://localhost:8080/api/appointments\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      patient: {\n        id: appointment.patientId\n      },\n      doctor: {\n        id: appointment.doctorId\n      },\n      appointmentDate: appointment.appointmentDate,\n      // \"2025-09-10\"\n      appointmentTime: appointment.appointmentTime + \":00\",\n      // add seconds\n      reason: appointment.reason,\n      status: \"REQUESTED\" // default new appointment status\n    })\n  });\n  if (!res.ok) {\n    const errorText = await res.text();\n    throw new Error(\"Failed to create appointment: \" + errorText);\n  }\n  return res.json();\n}","map":{"version":3,"names":["auth","registerPatient","data","response","fetch","method","headers","body","JSON","stringify","json","loginPatient","credentials","res","ok","errorText","text","Error","patientUrl","fetchPatientAppointments","patientId","fetchDoctors","createAppointment","appointment","patient","id","doctor","doctorId","appointmentDate","appointmentTime","reason","status"],"sources":["E:/3RD YEAR/HealthcareAppointmentManagementSystem/reactapp/src/utils/api.js"],"sourcesContent":["const auth = \"http://localhost:8080/api/auth\";\r\n\r\n// Register patient\r\nexport async function registerPatient(data) {\r\n    const response = await fetch(`${auth}/register/patient`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n    });\r\n    return response.json();\r\n}\r\n\r\n// Login patient\r\nexport async function loginPatient(credentials) {\r\n  const res = await fetch(`${auth}/login/patient`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n  if (!res.ok) {\r\n    const errorText = await res.text(); // reads backend ResponseEntity body\r\n    throw new Error(errorText || \"Login failed\");\r\n  }\r\n  return res.json();\r\n}\r\n\r\n// getPatient\r\n\r\nconst patientUrl = \"http://localhost:8080/api/patients\"\r\n\r\nexport async function fetchPatientAppointments(patientId) {\r\n    const res = await fetch(`${patientUrl}/${patientId}`);\r\n    if (!res.ok) {\r\n        const errorText = await res.text();\r\n        throw new Error(errorText || \"Failed to fetch appointments\");\r\n    }\r\n    return res.json();\r\n}\r\n\r\nexport async function fetchDoctors() {\r\n  const res = await fetch(\"http://localhost:8080/api/doctors\");\r\n  return res.json();\r\n}\r\n\r\n\r\nexport async function createAppointment(appointment) {\r\n  const res = await fetch(\"http://localhost:8080/api/appointments\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      patient: { id: appointment.patientId },\r\n      doctor: { id: appointment.doctorId },\r\n      appointmentDate: appointment.appointmentDate,   // \"2025-09-10\"\r\n      appointmentTime: appointment.appointmentTime + \":00\", // add seconds\r\n      reason: appointment.reason,\r\n      status: \"REQUESTED\" // default new appointment status\r\n    }),\r\n  });\r\n\r\n  if (!res.ok) {\r\n    const errorText = await res.text();\r\n    throw new Error(\"Failed to create appointment: \" + errorText);\r\n  }\r\n\r\n  return res.json();\r\n}\r\n\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,gCAAgC;;AAE7C;AACA,OAAO,eAAeC,eAAeA,CAACC,IAAI,EAAE;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,IAAI,mBAAmB,EAAE;IACrDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC7B,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeC,YAAYA,CAACC,WAAW,EAAE;EAC9C,MAAMC,GAAG,GAAG,MAAMT,KAAK,CAAC,GAAGJ,IAAI,gBAAgB,EAAE;IAC/CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;EAClC,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACC,EAAE,EAAE;IACX,MAAMC,SAAS,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,MAAM,IAAIC,KAAK,CAACF,SAAS,IAAI,cAAc,CAAC;EAC9C;EACA,OAAOF,GAAG,CAACH,IAAI,CAAC,CAAC;AACnB;;AAEA;;AAEA,MAAMQ,UAAU,GAAG,oCAAoC;AAEvD,OAAO,eAAeC,wBAAwBA,CAACC,SAAS,EAAE;EACtD,MAAMP,GAAG,GAAG,MAAMT,KAAK,CAAC,GAAGc,UAAU,IAAIE,SAAS,EAAE,CAAC;EACrD,IAAI,CAACP,GAAG,CAACC,EAAE,EAAE;IACT,MAAMC,SAAS,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAACF,SAAS,IAAI,8BAA8B,CAAC;EAChE;EACA,OAAOF,GAAG,CAACH,IAAI,CAAC,CAAC;AACrB;AAEA,OAAO,eAAeW,YAAYA,CAAA,EAAG;EACnC,MAAMR,GAAG,GAAG,MAAMT,KAAK,CAAC,mCAAmC,CAAC;EAC5D,OAAOS,GAAG,CAACH,IAAI,CAAC,CAAC;AACnB;AAGA,OAAO,eAAeY,iBAAiBA,CAACC,WAAW,EAAE;EACnD,MAAMV,GAAG,GAAG,MAAMT,KAAK,CAAC,wCAAwC,EAAE;IAChEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBe,OAAO,EAAE;QAAEC,EAAE,EAAEF,WAAW,CAACH;MAAU,CAAC;MACtCM,MAAM,EAAE;QAAED,EAAE,EAAEF,WAAW,CAACI;MAAS,CAAC;MACpCC,eAAe,EAAEL,WAAW,CAACK,eAAe;MAAI;MAChDC,eAAe,EAAEN,WAAW,CAACM,eAAe,GAAG,KAAK;MAAE;MACtDC,MAAM,EAAEP,WAAW,CAACO,MAAM;MAC1BC,MAAM,EAAE,WAAW,CAAC;IACtB,CAAC;EACH,CAAC,CAAC;EAEF,IAAI,CAAClB,GAAG,CAACC,EAAE,EAAE;IACX,MAAMC,SAAS,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAAC,gCAAgC,GAAGF,SAAS,CAAC;EAC/D;EAEA,OAAOF,GAAG,CAACH,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}